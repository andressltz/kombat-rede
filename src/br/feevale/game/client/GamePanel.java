package br.feevale.game.client;


import br.feevale.game.context.ContextGame;
import br.feevale.game.context.ContextPlayer;

import javax.swing.*;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.HashMap;

public class GamePanel extends javax.swing.JFrame implements Runnable {

    private static final int SERVER_PORT = 8181;
    private static final String SERVER_HOST = "localhost";

    public static HashMap<String, Player> players = new HashMap<>();
    public static ContextGame contextGame;
    private PrintWriter writer;
    private Socket socket;
    private boolean isKeyPressed = false;
    private int keyPressed;

    public GamePanel() {
        initComponents();
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GamePanel g = new GamePanel();
                contextGame = new ContextGame();
                g.connect();
                g.setSize(800, 600);
                g.setVisible(true);
                Thread game = new Thread(g);
                game.start();
            }
        });
    }

    private void connect() {
        try {
            socket = new Socket(SERVER_HOST, SERVER_PORT);
            writer = new PrintWriter(socket.getOutputStream());

            CommunicateThread c = new CommunicateThread(socket);
            c.communicate();
            c.start();
        } catch (IOException e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(null, "Erro ao conectar com o servidor: " + e.getLocalizedMessage());
            System.exit(1);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened();
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }

            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased();
            }
        });
        getContentPane().setLayout(null);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened() {
//        Player player = new Player();
//        player.setup();
//        players.put(" ", player);
//        getContentPane().add(player);
//        repaint();
    }

    private void formKeyPressed(java.awt.event.KeyEvent evt) {
        isKeyPressed = true;
        keyPressed = evt.getKeyCode();
    }

    private void formKeyReleased() {
    }

    private void updateGame() {
        for (ContextPlayer cPlayer : contextGame.getPlayers()) {
            Player player = players.get(cPlayer.getPlayerName());
            if (player == null) {
                player = new Player();
                player.setup(cPlayer.getX(), cPlayer.getY());
                player.setPlayerName(cPlayer.getPlayerName());
                players.put(cPlayer.getPlayerName(), player);
                getContentPane().add(player);
                repaint();
            } else {
                player.x = cPlayer.getX();
                player.y = cPlayer.getY();
//                System.out.println(cPlayer.getPlayerName() + " - " + player.state + " - " + cPlayer.getState());
                if (player.state == 0 && cPlayer.getState() == 1) {
                    player.attack();
                    player.state = 1;
                } else if (player.state == 1 && cPlayer.getState() == 0) {
                    player.normal();
                    player.state = 0;
                }
                player.move();
            }

        }
        if (isKeyPressed) {
//            System.out.println("updateGame() - key pressed " + keyPressed);
            writer.println(keyPressed);
            writer.flush();
            isKeyPressed = false;
        }
    }

    @Override
    public void run() {
        try {
            while (true) {
                updateGame();
                Thread.sleep(20);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

}

