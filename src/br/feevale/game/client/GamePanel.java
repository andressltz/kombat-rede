package br.feevale.game.client;


import java.awt.event.KeyEvent;

public class GamePanel extends javax.swing.JFrame implements Runnable {

    public static final int SPEED = 4;
    Player player;
    boolean keyRight = false;
    boolean keyLeft = false;
    boolean keyUp = false;
    boolean keyDown = false;

    public GamePanel() {
        initComponents();
    }

    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GamePanel g = new GamePanel();
                g.setSize(800, 600);
                g.setVisible(true);
                Thread game = new Thread(g);
                game.start();
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }

            public void keyReleased(java.awt.event.KeyEvent evt) {
                formKeyReleased(evt);
            }
        });
        getContentPane().setLayout(null);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {
        player = new Player();
        player.setup();
        getContentPane().add(player);
        repaint();
    }

    private void formKeyPressed(java.awt.event.KeyEvent evt) {
        if (isKeyPressDown(evt.getKeyCode())) {
            keyDown = true;
            keyUp = false;
            keyLeft = false;
            keyRight = false;
        } else if (isKeyPressUp(evt.getKeyCode())) {
            keyDown = false;
            keyUp = true;
            keyLeft = false;
            keyRight = false;
        } else if (isKeyPressLeft(evt.getKeyCode())) {
            keyDown = false;
            keyUp = false;
            keyLeft = true;
            keyRight = false;
        } else if (isKeyPressRight(evt.getKeyCode())) {
            keyDown = false;
            keyUp = false;
            keyLeft = false;
            keyRight = true;
        }
    }

    private void formKeyReleased(java.awt.event.KeyEvent evt) {
//        if (isKeyPressDown(evt.getKeyCode())) {
//            keyDown = false;
//            keyUp = true;
//            keyLeft = true;
//            keyRight = true;
//        } else if (isKeyPressUp(evt.getKeyCode())) {
//            keyDown = true;
//            keyUp = false;
//            keyLeft = true;
//            keyRight = true;
//        } else if (isKeyPressLeft(evt.getKeyCode())) {
//            keyDown = true;
//            keyUp = true;
//            keyLeft = false;
//            keyRight = true;
//        } else if (isKeyPressRight(evt.getKeyCode())) {
//            keyDown = true;
//            keyUp = true;
//            keyLeft = true;
//            keyRight = false;
//        }
        keyDown = false;
        keyUp = false;
        keyLeft = false;
        keyRight = false;
    }

    public void updateGame() {
        if (keyRight) {
            player.x += SPEED;
            player.move();
        } else if (keyLeft) {
            player.x -= SPEED;
            player.move();
        } else if (keyUp) {
            player.y -= SPEED;
            player.move();
        } else if (keyDown) {
            player.y += SPEED;
            player.move();
        }
    }

    @Override
    public void run() {
        try {
            while (true) {
                updateGame();
                Thread.sleep(20);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private boolean isKeyPressUp(int keyCode) {
        return keyCode == KeyEvent.VK_UP;
    }

    private boolean isKeyPressDown(int keyCode) {
        return keyCode == KeyEvent.VK_DOWN;
    }

    private boolean isKeyPressLeft(int keyCode) {
        return keyCode == KeyEvent.VK_LEFT;
    }

    private boolean isKeyPressRight(int keyCode) {
        return keyCode == KeyEvent.VK_RIGHT;
    }

}

